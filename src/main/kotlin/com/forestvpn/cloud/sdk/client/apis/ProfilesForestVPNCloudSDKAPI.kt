/**
 * ForestVPN Cloud SDK API
 *
 * ForestVPN Cloud - it's a Google Cloud but for VPN apps. Ready to use VPN Cloud Platform minimizes efforts to build fast, secure, and modern VPN apps. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@forestvpn.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.forestvpn.cloud.sdk.client.apis

import java.io.IOException
import okhttp3.OkHttpClient

import com.forestvpn.cloud.sdk.client.models.Error
import com.forestvpn.cloud.sdk.client.models.Profile
import com.forestvpn.cloud.sdk.client.models.Protocol

import com.squareup.moshi.Json

import com.forestvpn.cloud.sdk.client.infrastructure.ApiClient
import com.forestvpn.cloud.sdk.client.infrastructure.ApiResponse
import com.forestvpn.cloud.sdk.client.infrastructure.ClientException
import com.forestvpn.cloud.sdk.client.infrastructure.ClientError
import com.forestvpn.cloud.sdk.client.infrastructure.ServerException
import com.forestvpn.cloud.sdk.client.infrastructure.ServerError
import com.forestvpn.cloud.sdk.client.infrastructure.MultiValueMap
import com.forestvpn.cloud.sdk.client.infrastructure.PartConfig
import com.forestvpn.cloud.sdk.client.infrastructure.RequestConfig
import com.forestvpn.cloud.sdk.client.infrastructure.RequestMethod
import com.forestvpn.cloud.sdk.client.infrastructure.ResponseType
import com.forestvpn.cloud.sdk.client.infrastructure.Success
import com.forestvpn.cloud.sdk.client.infrastructure.toMultiValue

class ProfilesForestVPNCloudSDKAPI(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.forestvpn.com/cloud/v1")
        }
    }

    /**
     * Profile details
     * 
     * @param profileId 
     * @return Profile
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProfile(profileId: java.util.UUID) : Profile {
        val localVarResponse = getProfileWithHttpInfo(profileId = profileId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Profile
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Profile details
     * 
     * @param profileId 
     * @return ApiResponse<Profile?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProfileWithHttpInfo(profileId: java.util.UUID) : ApiResponse<Profile?> {
        val localVariableConfig = getProfileRequestConfig(profileId = profileId)

        return request<Unit, Profile>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProfile
     *
     * @param profileId 
     * @return RequestConfig
     */
    fun getProfileRequestConfig(profileId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/profiles/{profileId}/".replace("{"+"profileId"+"}", "$profileId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Profile protocol config
     * 
     * @param profileId 
     * @param protocolId 
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProfileProtocolConfig(profileId: java.util.UUID, protocolId: java.util.UUID) : kotlin.String {
        val localVarResponse = getProfileProtocolConfigWithHttpInfo(profileId = profileId, protocolId = protocolId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Profile protocol config
     * 
     * @param profileId 
     * @param protocolId 
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProfileProtocolConfigWithHttpInfo(profileId: java.util.UUID, protocolId: java.util.UUID) : ApiResponse<kotlin.String?> {
        val localVariableConfig = getProfileProtocolConfigRequestConfig(profileId = profileId, protocolId = protocolId)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProfileProtocolConfig
     *
     * @param profileId 
     * @param protocolId 
     * @return RequestConfig
     */
    fun getProfileProtocolConfigRequestConfig(profileId: java.util.UUID, protocolId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/profiles/{profileId}/protocols/{protocolId}.conf".replace("{"+"profileId"+"}", "$profileId").replace("{"+"protocolId"+"}", "$protocolId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Profile supported protocols
     * 
     * @param profileId 
     * @return kotlin.collections.List<Protocol>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProfileProtocols(profileId: java.util.UUID) : kotlin.collections.List<Protocol> {
        val localVarResponse = getProfileProtocolsWithHttpInfo(profileId = profileId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Protocol>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Profile supported protocols
     * 
     * @param profileId 
     * @return ApiResponse<kotlin.collections.List<Protocol>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProfileProtocolsWithHttpInfo(profileId: java.util.UUID) : ApiResponse<kotlin.collections.List<Protocol>?> {
        val localVariableConfig = getProfileProtocolsRequestConfig(profileId = profileId)

        return request<Unit, kotlin.collections.List<Protocol>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProfileProtocols
     *
     * @param profileId 
     * @return RequestConfig
     */
    fun getProfileProtocolsRequestConfig(profileId: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/profiles/{profileId}/protocols/".replace("{"+"profileId"+"}", "$profileId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
